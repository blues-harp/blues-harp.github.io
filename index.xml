<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://blues-harp.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 17 Mar 2016 15:58:19 +0800</lastBuildDate>
    <atom:link href="http://blues-harp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>shell编程--统计代码行数</title>
      <link>http://blues-harp.github.io/post/shell_code_linage/</link>
      <pubDate>Thu, 17 Mar 2016 15:58:19 +0800</pubDate>
      
      <guid>http://blues-harp.github.io/post/shell_code_linage/</guid>
      <description>

&lt;h1 id=&#34;shell编程-统计代码行数:1b0e5426c0cb7b47b7e22c71e688f998&#34;&gt;shell编程&amp;ndash;统计代码行数&lt;/h1&gt;

&lt;h3 id=&#34;引:1b0e5426c0cb7b47b7e22c71e688f998&#34;&gt;引：&lt;/h3&gt;

&lt;p&gt;平时我们都会遇到一个问题，写完一个项目后，想统计一下总的代码量，当代码文件很多时，一个个点开代码文件，然后把代码行数加起来是一件很费神的事。shell可以用短短几行代码就搞定这个问题。&lt;/p&gt;

&lt;h3 id=&#34;1-shell源码-code-linage-sh:1b0e5426c0cb7b47b7e22c71e688f998&#34;&gt;1. shell源码（code_linage.sh）：&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

if [ $# -eq 1 ] &amp;amp;&amp;amp; [ -d $1 ] 
then
    find $1 -type f -name &amp;quot;*.java&amp;quot; -print0 | xargs -0 wc -l
else
    echo &#39;wrong parameter&#39;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-shell代码分析:1b0e5426c0cb7b47b7e22c71e688f998&#34;&gt;2. shell代码分析：&lt;/h3&gt;

&lt;p&gt;这个代码的功能是：统计一个文件夹中java代码的行数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第1行：虽然开头是#，但是这句并不是注释，它的含义是用&lt;code&gt;/bin/bash&lt;/code&gt;来解释这一段脚本。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第3行：作用是判断是否只有一个参数，而且参数代表的是一个目录。$# 表示参数个数，要等于1；-d $1 是判断第一个参数是不是表示一个目录。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第5行：是这段代码的核心部分。这一行可以分成两部分，管道命令“|” 前面的&lt;code&gt;find&lt;/code&gt;命令功能是查找出 $1（也即第一个参数）目录下所有的java文件。        -print0 表示将这些找到的文件名用 \0 分隔；“|” 后面的命令功能是将统计每一个文件的代码行数。xargs可以将标准输入数据转换成命令行参数，传给&lt;code&gt;wc&lt;/code&gt;命令。-0 表示以 \0 为分隔符， wc -l 就是代码统计行数。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>second</title>
      <link>http://blues-harp.github.io/post/second/</link>
      <pubDate>Thu, 17 Mar 2016 13:40:43 +0800</pubDate>
      
      <guid>http://blues-harp.github.io/post/second/</guid>
      <description>

&lt;h1 id=&#34;第二篇博客:9f7936f9b5c071ae81db818b80a44a0d&#34;&gt;第二篇博客&lt;/h1&gt;

&lt;h3 id=&#34;目录1:9f7936f9b5c071ae81db818b80a44a0d&#34;&gt;目录1&lt;/h3&gt;

&lt;p&gt;这是我的第二篇博客&lt;/p&gt;

&lt;h3 id=&#34;目录2:9f7936f9b5c071ae81db818b80a44a0d&#34;&gt;目录2&lt;/h3&gt;

&lt;p&gt;这是我的第二篇博客
这是我的第二篇博客
这是我的第二篇博客这是我的第二篇博客&lt;/p&gt;

&lt;h3 id=&#34;目录3:9f7936f9b5c071ae81db818b80a44a0d&#34;&gt;目录3&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>My First Blog</title>
      <link>http://blues-harp.github.io/post/first/</link>
      <pubDate>Wed, 16 Mar 2016 21:47:24 +0800</pubDate>
      
      <guid>http://blues-harp.github.io/post/first/</guid>
      <description>

&lt;h3 id=&#34;hello:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;hello&lt;/h3&gt;

&lt;p&gt;aa&lt;br /&gt;
bb
cc
sadg&lt;/p&gt;

&lt;h3 id=&#34;7-更详细语法说明:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;7. 更详细语法说明&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://blues-harp.github.io/about/</link>
      <pubDate>Wed, 16 Mar 2016 21:27:40 +0800</pubDate>
      
      <guid>http://blues-harp.github.io/about/</guid>
      <description>&lt;p&gt;about about
  about&lt;/p&gt;

&lt;p&gt;about&lt;/p&gt;

&lt;p&gt;about&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MD5算法--网盘秒传</title>
      <link>http://blues-harp.github.io/post/md5_algorithm/</link>
      <pubDate>Sun, 13 Apr 2014 01:10:36 +0800</pubDate>
      
      <guid>http://blues-harp.github.io/post/md5_algorithm/</guid>
      <description>

&lt;h1 id=&#34;md5算法-网盘秒传:6a4b4117e1807248b40eee953a507a97&#34;&gt;MD5算法&amp;ndash;网盘秒传&lt;/h1&gt;

&lt;p&gt;　　在用网盘传东西的时候，突然发现传某些几个G的文件竟然几秒钟就传到网盘上去了，刚开始还以为是传送发生了错误，然后又重复传了几次还是一样。然后上网一查，看到知乎上的一个提问的讨论查了些网上的资料才明白其中原理。&lt;/p&gt;

&lt;p&gt;　　对于网盘服务器上的每一个文件，服务器上都存有一个相应的唯一的特征值，然后当你从客户端传文件到网盘上时，会先计算你要传的文件的特征值，然后与服务器中存的对比，发现相同特征值则表明你要传的文件在服务器上已经存在，这时就实现秒传了。&lt;/p&gt;

&lt;p&gt;　　那这个唯一的特征值是如何计算的呢？不部分是用MD5算法。&lt;/p&gt;

&lt;p&gt;　　MD5算法功能就是对于你传入的一个任意长度的数据（其实根据算法的原理应该小于2的64次方bit，这个在目前的文件来说已经是无穷大了），然后经过处理，产生一个“唯一”的128位的信息。而且这个过程是不可逆的，也即你不能通过这个128位信息反推出原数
　　&lt;/p&gt;

&lt;h3 id=&#34;1-md5算法的历史:6a4b4117e1807248b40eee953a507a97&#34;&gt;1. MD5算法的历史&lt;/h3&gt;

&lt;p&gt;　　1992年8月Ronald L. Rivest在向IETF提交了一份重要文件，描述了这种算法的原理，由于这种算法的公开性和安全性，在90年代被广泛使用在各种程序语言中，用以确保资料传递无误等。MD5由MD4、MD3、MD2改进而来，主要增强算法复杂度和不可逆性&lt;/p&gt;

&lt;p&gt;　　MD5较老，散列长度通常为128位，随着计算机运算能力提高，找到“碰撞”是可能的。因此，在少数安全要求高的场合不使用MD5。&lt;/p&gt;

&lt;p&gt;　　2004年，中国数学家王小云证明MD5数字签名算法可以产生碰撞。2007年，Marc Stevens，Arjen K. Lenstra和Benne de Weger进一步指出通过伪造软件签名，可重复性攻击MD5算法。研究者使用前缀碰撞法（chosen-prefix collision），使程序前端包含恶意程序，利用后面的空间添上垃圾代码凑出同样的MD5 哈希值。
　　
　　&lt;/p&gt;

&lt;h3 id=&#34;2-md5算法过程:6a4b4117e1807248b40eee953a507a97&#34;&gt;2. MD5算法过程：&lt;/h3&gt;

&lt;p&gt;对MD5算法简要的叙述可以为：MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。&lt;/p&gt;

&lt;p&gt;第一步、填充：如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余的结果等于448。填充的方法是填充一个1和n个0。填充完后，信息的长度就为N*512+448(bit)；&lt;/p&gt;

&lt;p&gt;第二步、记录信息长度：用64位来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为&lt;code&gt;N * 512 + 448 + 64 = (N+1) * 512&lt;/code&gt;位。&lt;/p&gt;

&lt;p&gt;第三步、装入标准的幻数（四个整数）：标准的幻数（物理顺序）是（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。如果在程序中定义应该是（A=0X67452301L，B=0XEFCDAB89L，C=0X98BADCFEL，D=0X10325476L）。有点晕哈，其实想一想就明白了。&lt;/p&gt;

&lt;p&gt;第四步、四轮循环运算：循环的次数是分组的个数（N+1）&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>